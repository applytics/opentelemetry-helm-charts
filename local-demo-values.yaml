components:
  frontend:
    envOverrides:
      - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: https://collector.example.local/v1/traces

  frontendProxy:
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - host: demo.example.local
          paths:
            - path: /
              pathType: Prefix
              port: 8080

  kafka:
    resources:
      limits:
        memory: 800Mi

  nginxProxyManager:
    enabled: true
    useDefault:
      env: true
    imageOverride:
      # repository: "jc21/nginx-proxy-manager"
      # tag: "latest"
      repository: "traefik"
      tag: "v2.10"
    service: {}
    ports:
      - name: http
        value: 80
      - name: admin
        value: 8080
    command:
      - traefik
      - "--providers.file.directory=/etc/config"
      - "--api.insecure=true"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--entryPoints.web.address=:80"
      # - --experimental.plugins.traefik-plugin.modulename=github.com/jlfxt/traefik-plugin
      # - --experimental.plugins.traefik-plugin.version=v0.1.3
    env: []
    resources:
      limits:
        memory: 200Mi
    configuration:
      prom.yml: |
        # http routing section
        http:
          routers:
            # Define a connection between requests and services
            to-prom:
              # rule: "Host(`npm.example.local`) && PathPrefix(`/`)"
              rule: "PathPrefix(`/`)"
              # If the rule matches, forward to the whoami service (declared below)
              service: prom
          services:
            # Define how to reach an existing service on our infrastructure
            prom:
              loadBalancer:
                servers:
                - url: http://otel-demo-prometheus-server.otel-demo.svc.cluster.local:9090
    ingress:
      enabled: true
      ingressClassName: nginx
      # annotations:
      #   nginx.ingress.kubernetes.io/enable-cors: "true"
      #   nginx.ingress.kubernetes.io/cors-allow-origin: "demo.example.local"
      hosts:
        - host: npm.example.local
          paths:
            - path: /
              pathType: Prefix
              port: 80
        - host: npm-admin.example.local
          paths:
            - path: /
              pathType: Prefix
              port: 8080

  example-java-app:
    enabled: true
    useDefault:
      env: true
    imageOverride:
      # repository: "jc21/nginx-proxy-manager"
      # tag: "latest"
      repository: "snagi/sample-java-otel"
      tag: "bad"
    service: {}
    ports:
      - name: http
        value: 8080
    env:
      - name: OTEL_TRACES_EXPORTER
        value: otlp
      - name: OTEL_METRICS_EXPORTER
        value: otlp
      - name: OTEL_LOGS_EXPORTER
        value: otlp
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    resources:
      limits:
        memory: 300Mi
    ingress:
      enabled: true
      ingressClassName: nginx
      # annotations:
      #   nginx.ingress.kubernetes.io/enable-cors: "true"
      #   nginx.ingress.kubernetes.io/cors-allow-origin: "demo.example.local"
      hosts:
        - host: java.example.local
          paths:
            - path: /
              pathType: Prefix
              port: 8080

opentelemetry-collector:
  config:
    exporters:
      prometheus:
        endpoint: "0.0.0.0:9465"
      otlp/traces:
        endpoint: "traces-prepper-headless.opensearch:21890"
        tls:
          insecure: true
      otlp/metrics:
        endpoint: "metrics-prepper-headless.opensearch:21891"
        tls:
          insecure: true
      otlp/logs:
        endpoint: "logs-prepper-headless.opensearch:21892"
        tls:
          insecure: true
    service:
      pipelines:
        traces:
          processors: [memory_limiter, resource, batch]
          exporters: [otlp, otlp/traces, debug, spanmetrics]
        metrics:
          receivers: [otlp, spanmetrics]
          processors: [memory_limiter, filter/ottl, transform, resource, batch]
          exporters: [otlphttp/prometheus, otlp/metrics, debug]
          # exporters: [prometheus, otlp/metrics, debug]
        logs:
          processors: [batch]
          exporters: [otlp/logs, debug]
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-origin: "demo.example.local"
    hosts:
      - host: collector.example.local
        paths:
          - path: /
            pathType: Prefix
            port: 4318